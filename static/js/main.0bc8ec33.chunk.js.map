{"version":3,"sources":["App.module.scss","Views/Dash/DashElements/InfoDashboard.module.scss","Views/Dash/index.module.scss","Views/Dash/DashElements/InfoItem.module.scss","Components/ReverseGeolocation.js","Util/stateAcronyms.js","Components/ProvinceSelector.js","Views/Initial.js","Components/TimevsCasesChart.js","Views/Dash/DashElements/CumulativeCases.js","Util/dataCalculations.js","Views/Dash/DashElements/NewCases.js","Views/Dash/DashElements/InfoItem.js","Views/Dash/DashElements/InfoDashboard.js","Util/numberStuff.js","constants.js","Views/Dash/DashElements/StatusIndicator.js","Views/Dash/index.js","Views/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ReverseGeolocation","handler","mock","KEY","API_LINK","mockData","coords","latitude","longitude","useState","stateCode","setStateCode","reverseGeoloc","position","a","fetch","json","locationData","stateResult","status","result","results","i","len","address_components","length","ac","types","indexOf","short_name","console","log","useEffect","navigator","geolocation","getCurrentPosition","sessionStorage","setItem","acronymToFullName","acronym","AZ","AL","AK","AR","CA","CO","CT","DC","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","AS","GU","MP","PR","VI","UM","ProvinceSelector","provinceList","handleChange","province","internalProvince","changeInternalProvince","value","onChange","e","target","map","val","state","key","Initial","provinceHandler","useGeolocation","setGeolocation","href","onClick","TimevsCasesChart","props","svgRef","useRef","wrapperRef","changeFlag","change","style","resizeListener","window","addEventListener","removeEventListener","node","d3","current","width","parseInt","getComputedStyle","margin","left","right","height","top","bottom","canvas","select","attr","xScale","range","yScale","domain","data","d","date","cases","xAxis","tickSizeOuter","tickFormat","transition","duration","call","yAxis","datum","x","y","curve","filter","el","average","tickSize","g","remove","className","graph","ref","axis","grid","NewCasesChart","provinceName","id","get7DayAverageKey","index","newData","slice","mean","undefined","newCases","InfoItem","infoItem","icon","src","text","title","description","amount","suffix","InfoDashboard","dataSet","addtlData","additionalData","positivity","setPositivity","hospitalized","setHospitalized","inICU","setICU","deceased","setDeceased","decimals","last7Days","roundedPositivity","dailyTests","dailyNewCases","totalTests","totalNewCases","getPositivityRate","t","positiveTests","negativeTests","Number","Math","round","hospitalBeds","currentUsageCovid","icuBeds","deaths","vaccinated","vaccinationsInitiatedRatio","infoDashboard","toFixed","SeverityDefinitions","mainText","subText","StatusIndicator","severity","severityObj","Dash","API_KEY","setData","originalData","setOriginalData","timeSeries","actualsTimeseries","formattedResult","curr","ds","toString","formattedDate","Date","fetchData","severityThemeCorrelation","level","low","medium","high","critical","severe","riskLevels","overall","graphGroup","graphContainer","NewCases","CumulativeCases","metrics","Footer","App","sessionProvince","getItem","setCurrentProvince","setProvinces","provinces","fetchProvinces","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,SAAW,kC,kBCAlFD,EAAOC,QAAU,CAAC,WAAa,yBAAyB,MAAQ,oBAAoB,KAAO,mBAAmB,SAAS,qBAAqB,KAAO,mBAAmB,KAAO,mBAAmB,eAAiB,6BAA6B,IAAM,kBAAkB,IAAM,kBAAkB,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,mBAAmB,SAAW,uBAAuB,OAAS,qBAAqB,OAAS,uB,kBCAzbD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,KAAO,uBAAuB,MAAQ,wBAAwB,YAAc,8BAA8B,OAAS,2B,uNCsD1LC,MArDf,YAA6C,IAAhBC,EAAe,EAAfA,QAASC,EAAM,EAANA,KAE9BC,EAAM,0CACNC,EAAW,oDAEXC,EAAW,CAACC,OAAQ,CAACC,SAAU,UAAWC,WAAY,YALlB,EAMRC,mBAAS,MAND,mBAMnCC,EANmC,KAMxBC,EANwB,cAQzBC,EARyB,8EAQxC,WAA6BC,GAA7B,2BAAAC,EAAA,6DACQR,EAASO,EAASP,OAD1B,SAEoCS,MAAM,GAAD,OAAIX,EAAJ,mBAAuBE,EAAOC,SAA9B,YAA0CD,EAAOE,UAAjD,gBAAkEL,IAF3G,8BAEmHa,OAFnH,OAMI,GAJIC,EAFR,OAIQC,EAAc,KAES,OAAxBD,EAAaE,OAEZ,IADIC,EAASH,EAAaI,QAAQ,GACzBC,EAAI,EAAGC,EAAMH,EAAOI,mBAAmBC,OAAQH,EAAIC,EAAKD,KACzDI,EAAKN,EAAOI,mBAAmBF,IAC5BK,MAAMC,QAAQ,gCAAkC,IAAGV,EAAcQ,EAAGG,YAGnFC,QAAQC,IAAI,oBAAsBb,GAClCP,EAAaO,GAdjB,6CARwC,sBAkDxC,OAjBAc,qBAAU,WACN,GAAG9B,EAEC,OADAU,EAAcP,IACP,EAVP4B,UAAUC,YACVD,UAAUC,YAAYC,mBAAmBvB,GAEzCkB,QAAQC,IAAI,kDAWjB,IAEHC,qBAAU,WACFtB,IAEJ0B,eAAeC,QAAQ,WAAY3B,GACnCT,EAAQS,MAET,CAACA,IAEG,MCcM4B,MAlEjB,SAA2BC,GACvB,IAAIvB,EAAO,CACTwB,GAAI,UACJC,GAAI,UACJC,GAAI,SACJC,GAAI,WACJC,GAAI,aACJC,GAAI,WACJC,GAAI,cACJC,GAAI,uBACJC,GAAI,WACJC,GAAI,UACJC,GAAI,UACJC,GAAI,SACJC,GAAI,QACJC,GAAI,WACJC,GAAI,UACJC,GAAI,OACJC,GAAI,SACJC,GAAI,WACJC,GAAI,YACJC,GAAI,QACJC,GAAI,WACJC,GAAI,gBACJC,GAAI,WACJC,GAAI,YACJC,GAAI,cACJC,GAAI,WACJC,GAAI,UACJC,GAAI,WACJC,GAAI,SACJC,GAAI,gBACJC,GAAI,aACJC,GAAI,aACJC,GAAI,WACJC,GAAI,iBACJC,GAAI,eACJC,GAAI,OACJC,GAAI,WACJC,GAAI,SACJC,GAAI,eACJC,GAAI,eACJC,GAAI,iBACJC,GAAI,eACJC,GAAI,YACJC,GAAI,QACJC,GAAI,OACJC,GAAI,UACJC,GAAI,WACJC,GAAI,aACJC,GAAI,gBACJC,GAAI,YACJC,GAAI,UACJC,GAAI,iBACJC,GAAI,OACJC,GAAI,2BACJC,GAAI,cACJC,GAAI,sBACJC,GAAI,+BAEN,OAAqB,MAAjBhF,EAAKuB,GACAvB,EAAKuB,GAEPA,GCzCI0D,MAnBf,YAAmE,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,SAAW,EACb3F,mBAAS2F,GAAY,IADR,mBACzDC,EADyD,KACvCC,EADuC,KAQ9D,OACI,oCACKJ,GACG,4BAAQK,MAAOF,EAAkBG,SAR/B,SAACC,GACXN,EAAaM,EAAEC,OAAOH,OACtBD,EAAuBG,EAAEC,OAAOH,SAOnBL,EAAaS,KAAI,SAAAC,GAAG,OAAI,4BAAQL,MAAOK,EAAIC,MAAOC,IAAKF,EAAIC,OAAQvE,EAAkBsE,EAAIC,cCK/FE,MAdf,YAAkD,IAAhCC,EAA+B,EAA/BA,gBAAiBd,EAAc,EAAdA,aAAc,EACNzF,oBAAS,GADH,mBACxCwG,EADwC,KACxBC,EADwB,KAE7C,OACE,qEACiC,IAC/B,kBAAC,EAAD,CAAkBhB,aAAcA,EAAcC,aAAca,IAC3D,IAHH,OAGY,IACV,uBAAGG,KAAK,IAAIC,QAAS,kBAAMF,GAAe,KAA1C,yCAECD,GAAmB,kBAAC,EAAD,CAAoBhH,QAAS+G,M,eCqI1CK,MA9If,SAA2BC,GACvB,IAAIC,EAASC,mBACTC,EAAaD,mBAFa,EAGH/G,oBAAS,GAHN,mBAGzBiH,EAHyB,KAGbC,EAHa,KAOxBC,EAAQN,EAAMM,MAqGpB,OAnGA5F,qBAAU,WACN,IAAM6F,EAAiB,WAErBF,EAAOD,GAAc,IAAM,EAAIA,MAMjC,OAHAI,OAAOC,iBAAiB,SAAUF,GAG3B,WAELC,OAAOE,oBAAoB,SAAUH,MAExC,IAEH7F,qBAAU,WACN,IAAIiG,EAAOC,IAAUT,EAAWU,SAASF,OACrCG,EAAQC,SAASP,OAAOQ,iBAAiBL,GAAMG,OAASd,EAAMiB,OAAOC,KAAOlB,EAAMiB,OAAOE,MACzFC,EAASL,SAASP,OAAOQ,iBAAiBL,GAAMS,QAAUpB,EAAMiB,OAAOI,IAAMrB,EAAMiB,OAAOK,OAIxFC,EAFMX,IAAUX,EAAOY,SAEVW,OAAO,oBACrBC,KAAK,YACF,aAAezB,EAAMiB,OAAOC,KAAO,IAAMlB,EAAMiB,OAAOI,IAAM,KAIhEK,EAASd,MAAee,MAAM,CAAE,EAAGb,IAEnCc,EAAShB,MAAiBe,MAAM,CAAEP,EAAQ,IAI9CM,EAAOG,OAAOjB,IAAUZ,EAAM8B,MAAM,SAACC,GAAD,OAAOA,EAAEC,SAC7CJ,EAAOC,OAAO,CAAC,EAAGjB,IAAOZ,EAAM8B,MAAM,SAACC,GAAD,OAAQA,EAAEE,WAG/C,IAAMC,EAAQtB,IAAcc,GAAQS,cAAc,GAAGC,WAAWxB,IAAc,OAC9EW,EAAOC,OAAO,WACTC,KAAK,YAAa,eAAiBL,EAAS,KAC5CiB,aACAC,SA7CY,KA8CZC,KAAKL,GAGV,IAAMM,EAAQ5B,IAAYgB,GAAQO,cAAc,GAChDZ,EAAOC,OAAO,WACTa,aACAC,SApDY,KAqDZC,KAAKC,GAIVjB,EACKC,OAAO,aACPiB,MAAMzC,EAAM8B,MACZO,aACAC,SA7DY,KA8DZb,KAAK,IAAKb,MACN8B,GAAE,SAASX,GAAK,OAAOL,EAAOK,EAAEC,SAChCW,GAAE,SAASZ,GAAK,OAAOH,EAAOG,EAAEE,UAChCW,MAAMhC,MAEVa,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAtEM,KAyEbzB,EAAM8B,KAAKe,QAAO,SAACC,GAAD,OAAQA,EAAGC,WAAS5I,OAAS,GAE9CoH,EACKC,OAAO,iBACPiB,MAAMzC,EAAM8B,MACZO,aACAC,SA9EQ,KA+ERb,KAAK,IAAKb,MACN8B,GAAE,SAASX,GAAI,OAAOL,EAAOK,EAAEC,SAC/BW,GAAE,SAAUZ,GAAI,OAAOH,EAAOG,EAAEgB,YACpCH,MAAMhC,MAEVa,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,mBAAoB,GAG9BF,EACKC,OAAO,kBACPa,aACAC,SA5FY,KA6FZC,KA1DsB3B,IAAYgB,GA2D9BoB,UAAUlC,GACVsB,WAAW,KAEfG,MAAK,SAAAU,GAAC,OAAIA,EAAEzB,OAAO,WAAW0B,YAC9BzB,KAAK,mBAAoB,OAE/B,CAACzB,EAAOI,IAGP,yBAAK+C,UAAW7C,EAAM8C,MAAOC,IAAKlD,EAAYG,MAAO,CAACQ,MAAO,SACzD,yBAAKuC,IAAKpD,EAAQK,MAAO,CAACQ,MAAO,OAAQM,OAAQ,SAC7C,uBAAG+B,UAAU,mBACT,uBAAGA,UAAS,UAAK7C,EAAMgD,KAAX,aACZ,uBAAGH,UAAS,UAAK7C,EAAMgD,KAAX,aACZ,0BAAMH,UAAS,UAAK7C,EAAMwB,KAAX,eACf,0BAAMqB,UAAU,iBAChB,uBAAGA,UAAS,UAAK7C,EAAMiD,KAAX,wBC7FjBC,MAzBf,SAAwBxD,GAUpB,OACI,oCACA,6DAAmCA,EAAMyD,cACxCzD,EAAM8B,KACP,kBAAC,EAAD,CACIA,KAdoB9B,EAAM8B,KAAKzC,KAAI,SAACC,EAAKtF,GAAN,MACzC,CACIiI,MAAO3C,EAAI2C,MACXD,KAAM1C,EAAI0C,SAYRf,OARO,CAACI,IAAK,GAAIC,OAAQ,GAAIJ,KAAM,GAAIC,MAAO,IAS9CuC,GAAI1D,EAAM0D,GACVpD,MAAON,EAAMM,QAEb,8ECNZ,SAASqD,EAAkB7B,EAAM8B,EAAOpE,GACpC,IAAIqE,EAAU/B,EAAKgC,MAAMF,EAAQ,EAAGA,EAAQ,GACvCvE,KAAI,SAAAyD,GAAE,OAAIA,EAAGtD,MAEduE,EAAOnD,IAAQiD,GACnB,YAAgBG,IAATD,EAAqB,EAAIA,ECUrBP,MA3Bf,SAAwBxD,GAYpB,OACI,oCACA,4DAAkCA,EAAMyD,cACvCzD,EAAM8B,KACP,kBAAC,EAAD,CACIA,KAfoB9B,EAAM8B,KAAKzC,KAAI,SAACC,EAAKtF,GAAN,MACzC,CACIiI,MAAO3C,EAAI2E,SACXjC,KAAM1C,EAAI0C,KACVe,QAASY,EAAkB3D,EAAM8B,KAAM9H,EAAG,gBAYxCiH,OARO,CAACI,IAAK,GAAIC,OAAQ,GAAIJ,KAAM,GAAIC,MAAO,IAS9CuC,GAAI1D,EAAM0D,GACVpD,MAAON,EAAMM,QAEb,8E,gBCMG4D,MA9Bf,SAAkBlE,GAcd,OACI,yBAAKmD,UAAW7C,IAAM6D,UAClB,yBAAKhB,UAAW7C,IAAM8D,MAClB,yBAAKC,IAAG,sBAAiBrE,EAAMoE,SAEnC,yBAAKjB,UAAW7C,IAAMgE,MAClB,yBAAKnB,UAAW7C,IAAMiE,OAAQvE,EAAMuE,OACpC,yBAAKpB,UAAW7C,IAAMkE,aAAcxE,EAAMwE,cAE9C,yBAAKrB,UAAW7C,IAAMmE,QAClB,8BAAOzE,EAAMa,QAASb,EAAM0E,W,qBCiE7BC,MAlFf,SAAuB3E,GAEnB,IAAI4E,EAAU5E,EAAM8B,KAChB+C,EAAY7E,EAAM8E,eAHG,EAMS3L,mBAAS,KANlB,mBAMpB4L,EANoB,KAMRC,EANQ,OAQa7L,mBAAS,CAAC,EAAG,IAR1B,mBAQpB8L,EARoB,KAQNC,EARM,OASH/L,mBAAS,CAAC,EAAE,IATT,mBASpBgM,EAToB,KASbC,EATa,OAUKjM,mBAAS,CAAC,EAAE,IAVjB,mBAUpBkM,EAVoB,KAUVC,EAVU,KAYzB5K,qBAAU,WACN,GAAIkK,EAAJ,CAGA,IC3BO3F,EAAOsG,ED2BVC,EAAYZ,EAAQd,MAAMc,EAAQzK,OAAS,EAAGyK,EAAQzK,QAGtDsL,GC9BGxG,EJEf,SAA2ByG,EAAYC,GAInC,IAHA,IAAIC,EAAa,EACbC,EAAgB,EAEX7L,EAAI,EAAGA,EAAI2L,EAAcxL,OAAQH,IAClC0L,EAAW1L,IAAM,GAAK2L,EAAc3L,IAAM,IAE9C4L,GAAcF,EAAW1L,GACzB6L,GAAiBF,EAAc3L,IAGnC,OAAQ6L,EAAgBD,EAAc,IGiBJE,CAC1BN,EAAUnG,KAAI,SAAA0G,GAAC,OAAIA,EAAEC,cAAgBD,EAAEE,iBACvCT,EAAUnG,KAAI,SAAA0G,GAAC,OAAIA,EAAEC,kBChCXT,EDgC4B,EC/BvCW,OAAOC,KAAKC,MAAMnH,EAAM,IAAIsG,GAAU,KAAKA,IDgC9CP,EAAcS,GAGdP,EACIN,EACKvF,KAAI,SAAAyD,GAAE,OAAIA,EAAGuD,aAAaC,qBAC1BzD,QAAO,SAAAC,GAAE,OAAW,OAAPA,KACbgB,OAAO,IAIhBsB,EACIR,EACKvF,KAAI,SAAAyD,GAAE,OAAIA,EAAGyD,QAAQD,qBACrBzD,QAAO,SAAAC,GAAE,OAAW,OAAPA,KACbgB,OAAO,IAGhBwB,EAAYV,EAAQvF,KAAI,SAAAyD,GAAE,OAAIA,EAAG0D,UAAQ1C,OAAO,OAEjD,CAACc,IAEJ,IAAI6B,EAAa5B,EAAmD,IAAvCA,EAAU6B,2BAAmC,KAE1E,OACI,oCACK9B,GACG,yBAAKzB,UAAW7C,IAAMqG,eAClB,kBAAC,EAAD,CACIvC,KAAM,qBACNG,MAAO,kBACPC,YAAa,2EACb3D,QAASkE,IACb,kBAAC,EAAD,CACIX,KAAM,eACNG,MAAO,yBACP1D,QAASoE,EAAa,GACtBT,YAAa,2DACjB,kBAAC,EAAD,CACIJ,KAAM,iBACNG,MAAO,SACPC,YAAa,8DACb3D,QAASsE,EAAM,KACnB,kBAAC,EAAD,CACIf,KAAM,YACNG,MAAO,SACPC,YAAa,2BACb3D,QAASwE,EAAS,KACtB,kBAAC,EAAD,CACIjB,KAAM,cACNG,MAAO,mCACPC,YAAa,oGACb3D,QAAS4F,EAAWG,QAAQ,GAC5BlC,OAAQ,SEtFnBmC,EAAsB,CAC/B,CACIC,SAAU,MACVC,QAAS,4BAEb,CACID,SAAU,SACVC,QAAS,uBAEb,CACID,SAAU,OACVC,QAAS,uBAEb,CACID,SAAU,WACVC,QAAS,mBAEb,CACID,SAAU,SACVC,QAAS,oBCLFC,MAXf,YAAsC,IAAZC,EAAW,EAAXA,SAElBC,EAAcL,EAAoBI,GAEtC,OACI,oCACI,4CAAkBC,EAAYJ,UADlC,IACiD,4BAAKI,EAAYH,W,gBCwG3DI,MAnGf,YAAkE,IAAnDrI,EAAkD,EAAlDA,SAAUF,EAAwC,EAAxCA,aAAcc,EAA0B,EAA1BA,gBAAiB0H,EAAS,EAATA,QAAS,EAEtCjO,mBAAS,MAF6B,mBAE1DyL,EAF0D,KAEjDyC,EAFiD,OAGzBlO,mBAAS,MAHgB,mBAG1DmO,EAH0D,KAG5CC,EAH4C,KAK3D9D,EAAezI,EAAkB8D,GAErCpE,qBAAU,WAAM,4CACZ,gCAAAlB,EAAA,6DACMM,GAAS,EAEbU,QAAQC,IAAI,sBAAwBqE,GAHtC,kBAM0BrF,MAAM,wCAAD,OAAyCqF,EAAzC,mCAA4EsI,IAN3G,8BAMuH1N,OANvH,OAMII,EANJ,gEASIU,QAAQC,IAAI,yCAThB,2BAcE8M,EAAgBzN,GAIZ0N,EAAa1N,EAAO2N,kBAAkB5E,QAAO,SAAAC,GAAE,OAAoB,OAAhBA,EAAGmB,UAAkC,OAAbnB,EAAGb,SAE5EyF,EAAkBF,EAAWnI,KAAI,SAAAsI,GAErC,IAAMC,EAAKD,EAAK3F,KAAK6F,WAEfC,EAAgB,IAAIC,KAAKH,EAAG9D,MAAM,EAAE,GAAI8D,EAAG9D,MAAM,EAAE,GAAK,EAAkC8D,EAAG9D,MAAM,EAAE,KAE3G,OAAO,eAAI6D,EAAX,CAAiB3F,KAAM8F,OAGzBT,EAAQK,GA7BV,2DADY,uBAAC,WAAD,wBAiCVM,KACH,CAAClJ,IAEJ,IAAMmJ,EAA2B,CAC/B,CACEC,MAAO,MACP5H,MAAOA,IAAM6H,KAEf,CACED,MAAO,SACP5H,MAAOA,IAAM8H,QAEf,CACEF,MAAO,OACP5H,MAAOA,IAAM+H,MAEf,CACEH,MAAO,WACP5H,MAAOA,IAAMgI,UAEf,CACEJ,MAAO,SACP5H,MAAOA,IAAMiI,SAIjB,OACI,oCACC3J,GAAgBgG,EACb,oCAEE,yBAAKzB,UAAW7C,IAAMe,IAAM,IAAM4G,EAAyBX,EAAeA,EAAakB,WAAWC,QAAU,MAAMnI,OAChH,2CAAiBmD,GACjB,kBAAC,EAAD,CAAiBwD,SAAUK,EAAeA,EAAakB,WAAWC,QAAU,OAE5E,iGACA,kBAAC,EAAD,CAAkB3J,SAAUA,EAAUF,aAAcA,EAAcC,aAAca,IAEhF,yBAAKyD,UAAW7C,IAAMoI,YACpB,yBAAKvF,UAAW7C,IAAMqI,gBACpB,kBAACC,EAAD,CAAe9G,KAAM8C,EAASnB,aAAcA,EAAcnD,MAAOA,OAEnE,yBAAK6C,UAAW7C,IAAMqI,gBACpB,kBAACE,EAAD,CAAsB/G,KAAM8C,EAASnB,aAAcA,EAAcnD,MAAOA,SAK9E,yBAAK6C,UAAW7C,IAAMgB,QACpB,kBAAC,EAAD,CAAeQ,KAAM8C,EAASE,eAAgBwC,EAAeA,EAAawB,QAAU,SAIxF,oDCzFKC,MAhBf,WACI,OACI,6BACI,uCAEA,yCAAc,uBAAGlJ,KAAK,6BAAR,mBACd,8CAAmB,uBAAGA,KAAK,4BAAR,kBACnB,gFAEA,uCACa,uBAAGA,KAAK,yEAAR,UADb,QAC4G,uBAAGA,KAAK,qCAAR,aCIjHuH,EAAU,mCA8BF4B,MA5Bf,WACE,IAAIC,EAAkBnO,eAAeoO,QAAQ,YADhC,EAEwB/P,mBAAS8P,GAAmB,MAFpD,mBAERnK,EAFQ,KAEEqK,EAFF,OAGsBhQ,mBAAS,MAH/B,mBAGRyF,EAHQ,KAGMwK,EAHN,KAcb,OATA1O,qBAAU,WAAM,4CACd,4BAAAlB,EAAA,sEAC+BC,MAAM,qDAAD,OAAsD2N,IAD1F,8BACsG1N,OADtG,OACM2P,EADN,OAEED,EAAaC,GAFf,4CADc,uBAAC,WAAD,wBAMdC,KACC,IAGD,yBAAKnG,UAAW7C,IAAM0I,KAClBlK,EAGA,oCACE,kBAAC,EAAD,CAAMA,SAAUA,EAAUF,aAAcA,EAAcc,gBAAiByJ,EAAoB/B,QAASA,IACpG,kBAAC,EAAD,OAJF,kBAAC,EAAD,CAASxI,aAAcA,EAAcc,gBAAiByJ,MCvB1CI,QACW,cAA7B/I,OAAOgJ,SAASC,UAEe,UAA7BjJ,OAAOgJ,SAASC,UAEhBjJ,OAAOgJ,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBpP,WACrBA,UAAUqP,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9P,QAAQ8P,MAAMA,EAAMC,c","file":"static/js/main.0bc8ec33.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1pkG7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoDashboard\":\"InfoDashboard_infoDashboard__gB9Ar\",\"dashItem\":\"InfoDashboard_dashItem__CJlrz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphGroup\":\"Dash_graphGroup__pNx9X\",\"graph\":\"Dash_graph__orXhK\",\"axis\":\"Dash_axis__2QDWx\",\"y-axis\":\"Dash_y-axis__2EAs1\",\"grid\":\"Dash_grid__2Fslt\",\"tick\":\"Dash_tick__hTryi\",\"graphContainer\":\"Dash_graphContainer__3RES6\",\"top\":\"Dash_top__3UCPN\",\"low\":\"Dash_low__FsZTN\",\"data\":\"Dash_data__V2IRp\",\"medium\":\"Dash_medium__2Mpxf\",\"high\":\"Dash_high__1DYu2\",\"critical\":\"Dash_critical__TuLUd\",\"severe\":\"Dash_severe__C2aNL\",\"bottom\":\"Dash_bottom__13aGn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoItem\":\"InfoItem_infoItem__2peAf\",\"icon\":\"InfoItem_icon__39J6D\",\"text\":\"InfoItem_text__3dODb\",\"title\":\"InfoItem_title__3oPMH\",\"description\":\"InfoItem_description__1ypuv\",\"amount\":\"InfoItem_amount__3RQmG\"};","import { useEffect, useState } from 'react';\r\n\r\nfunction ReverseGeolocation({handler, mock}){\r\n    // TODO: Get the API Key  out of here\r\n    let KEY = 'AIzaSyD7AUSyC4Ywj6PETcxb3VoRJuCvyJabJaQ';\r\n    let API_LINK = 'https://maps.googleapis.com/maps/api/geocode/json';\r\n\r\n    let mockData = {coords: {latitude: 40.714224, longitude: -73.961452}};\r\n    let [stateCode, setStateCode] = useState(null);\r\n    \r\n    async function reverseGeoloc(position){\r\n        let coords = position.coords;\r\n        let locationData = await (await fetch(`${API_LINK}?latlng=${coords.latitude},${coords.longitude}&key=${KEY}`)).json();\r\n\r\n        let stateResult = null;\r\n\r\n        if(locationData.status === 'OK'){\r\n            let result = locationData.results[0];\r\n            for (var i = 0, len = result.address_components.length; i < len; i++) {\r\n                var ac = result.address_components[i];\r\n                if (ac.types.indexOf(\"administrative_area_level_1\") >= 0) stateResult = ac.short_name;\r\n            }\r\n        }\r\n        console.log('Detected state : ' + stateResult);\r\n        setStateCode(stateResult);\r\n    }\r\n\r\n    function getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(reverseGeoloc);\r\n        } else { \r\n            console.log('Geolocation is not supported by this browser');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mock){\r\n            reverseGeoloc(mockData);\r\n            return true;\r\n        }\r\n    \r\n        getLocation();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(!stateCode) return;\r\n        \r\n        sessionStorage.setItem('province', stateCode);\r\n        handler(stateCode);\r\n\r\n    }, [stateCode]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default ReverseGeolocation;","function acronymToFullName(acronym) {\r\n    let json = {\r\n      AZ: 'Arizona',\r\n      AL: 'Alabama',\r\n      AK: 'Alaska',\r\n      AR: 'Arkansas',\r\n      CA: 'California',\r\n      CO: 'Colorado',\r\n      CT: 'Connecticut',\r\n      DC: 'District of Columbia',\r\n      DE: 'Delaware',\r\n      FL: 'Florida',\r\n      GA: 'Georgia',\r\n      HI: 'Hawaii',\r\n      ID: 'Idaho',\r\n      IL: 'Illinois',\r\n      IN: 'Indiana',\r\n      IA: 'Iowa',\r\n      KS: 'Kansas',\r\n      KY: 'Kentucky',\r\n      LA: 'Louisiana',\r\n      ME: 'Maine',\r\n      MD: 'Maryland',\r\n      MA: 'Massachusetts',\r\n      MI: 'Michigan',\r\n      MN: 'Minnesota',\r\n      MS: 'Mississippi',\r\n      MO: 'Missouri',\r\n      MT: 'Montana',\r\n      NE: 'Nebraska',\r\n      NV: 'Nevada',\r\n      NH: 'New Hampshire',\r\n      NJ: 'New Jersey',\r\n      NM: 'New Mexico',\r\n      NY: 'New York',\r\n      NC: 'North Carolina',\r\n      ND: 'North Dakota',\r\n      OH: 'Ohio',\r\n      OK: 'Oklahoma',\r\n      OR: 'Oregon',\r\n      PA: 'Pennsylvania',\r\n      RI: 'Rhode Island',\r\n      SC: 'South Carolina',\r\n      SD: 'South Dakota',\r\n      TN: 'Tennessee',\r\n      TX: 'Texas',\r\n      UT: 'Utah',\r\n      VT: 'Vermont',\r\n      VA: 'Virginia',\r\n      WA: 'Washington',\r\n      WV: 'West Virginia',\r\n      WI: 'Wisconsin',\r\n      WY: 'Wyoming',\r\n      AS: \"American Samoa\",\r\n      GU: \"Guam\",\r\n      MP: \"Northern Mariana Islands\",\r\n      PR: \"Puerto Rico\",\r\n      VI: \"U.S. Virgin Islands\",\r\n      UM: \"U.S. Minor Outlying Islands\",\r\n    }\r\n    if (json[acronym] != null) {\r\n      return json[acronym];\r\n    }\r\n    return acronym;\r\n  }\r\n\r\n  export default acronymToFullName;","import React, {useState} from 'react';\r\nimport acronymToFullName from '../Util/stateAcronyms';\r\n\r\nfunction ProvinceSelector({provinceList, handleChange, province}) {\r\n    let [internalProvince, changeInternalProvince] = useState(province || '');\r\n\r\n    var handler = (e) => {\r\n        handleChange(e.target.value);\r\n        changeInternalProvince(e.target.value);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {provinceList && (\r\n                <select value={internalProvince} onChange={handler}>\r\n                    {provinceList.map(val => <option value={val.state} key={val.state}>{acronymToFullName(val.state)}</option>)}\r\n                </select>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProvinceSelector;","import React, {useState} from 'react';\r\n\r\n// Components\r\nimport ReverseGeolocation from 'Components/ReverseGeolocation';\r\nimport ProvinceSelector from 'Components/ProvinceSelector';\r\n\r\nfunction Initial({provinceHandler, provinceList}){\r\n    let [useGeolocation, setGeolocation] = useState(false);\r\n    return (\r\n      <>\r\n        Select a state from the list: {' '}\r\n        <ProvinceSelector provinceList={provinceList} handleChange={provinceHandler} />\r\n        {' '} or {' '} \r\n        <a href='#' onClick={() => setGeolocation(true)}>Click here to determine your location</a>\r\n\r\n        {useGeolocation && (<ReverseGeolocation handler={provinceHandler} />)}\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Initial;","import React, {useEffect, useRef, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction TimevsCasesChart (props) {\r\n    let svgRef = useRef();\r\n    let wrapperRef = useRef();\r\n    let [changeFlag, change] = useState(false);\r\n\r\n    const strokeWidth = 2.2;\r\n    const animDuration = 300;\r\n    const style = props.style;\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n          // change width from the state object)\r\n          change(changeFlag >= 100 ? 0 : changeFlag++)\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n    \r\n        // clean up function\r\n        return () => {\r\n          // remove resize listener\r\n          window.removeEventListener('resize', resizeListener);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let node = d3.select(wrapperRef.current).node();\r\n        let width = parseInt(window.getComputedStyle(node).width) - props.margin.left - props.margin.right;\r\n        let height = parseInt(window.getComputedStyle(node).height) - props.margin.top - props.margin.bottom;\r\n        // SVG Canvas\r\n        const svg = d3.select(svgRef.current);\r\n\r\n        const canvas = svg.select('.group-container')\r\n            .attr(\"transform\",\r\n                \"translate(\" + props.margin.left + \",\" + props.margin.top + \")\");\r\n        \r\n        // We define the scales\r\n        // X will have a time scale\r\n        var xScale = d3.scaleTime().range([ 0, width ]);\r\n        // Y will have a linear scale.\r\n        var yScale = d3.scaleLinear().range([ height, 0 ]);\r\n        // Add gridlines        \r\n        var makeYGridlines = () => d3.axisLeft(yScale); \r\n        \r\n        xScale.domain(d3.extent(props.data, (d) => d.date ));\r\n        yScale.domain([0, d3.max(props.data, (d) => +d.cases )]);\r\n\r\n        // x Axis\r\n        const xAxis = d3.axisBottom(xScale).tickSizeOuter(0).tickFormat(d3.timeFormat(\"%b\"));\r\n        canvas.select('.x-axis')\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .transition()\r\n            .duration(animDuration)\r\n            .call(xAxis);\r\n        \r\n        // y Axis\r\n        const yAxis = d3.axisLeft(yScale).tickSizeOuter(0);\r\n        canvas.select('.y-axis')\r\n            .transition()\r\n            .duration(animDuration)\r\n            .call(yAxis);        \r\n        \r\n\r\n        // Cases path\r\n        canvas\r\n            .select('.dataPath')\r\n            .datum(props.data)\r\n            .transition()\r\n            .duration(animDuration)\r\n            .attr(\"d\", d3.line()\r\n                .x(function(d) { return xScale(d.date) })\r\n                .y(function(d) { return yScale(d.cases) })\r\n                .curve(d3.curveBasis)\r\n            )\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"#A14EBF\")\r\n            .attr(\"stroke-width\", strokeWidth);\r\n\r\n        // 7-Day Moving average path\r\n        if(props.data.filter((el) => el.average).length > 0){\r\n            // 7-Day Moving Average\r\n            canvas\r\n                .select('.sevenDayPath')\r\n                .datum(props.data)\r\n                .transition()\r\n                .duration(animDuration)\r\n                .attr(\"d\", d3.line()\r\n                    .x(function(d) {return xScale(d.date) })\r\n                    .y(function (d) {return yScale(d.average)})\r\n                .curve(d3.curveBasis)\r\n            )\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"white\")\r\n            .attr(\"stroke-dasharray\", 4);\r\n        }\r\n        // Gridlines\r\n        canvas\r\n            .select('.gridLinesPath')\r\n            .transition()\r\n            .duration(animDuration)\r\n            .call(makeYGridlines()\r\n                .tickSize(-width)\r\n                .tickFormat(\"\")\r\n            )\r\n            .call(g => g.select(\".domain\").remove())\r\n            .attr(\"stroke-dasharray\", \"2\");\r\n\r\n    }, [props, changeFlag]);\r\n\r\n    return (\r\n        <div className={style.graph} ref={wrapperRef} style={{width: '100%'}}>\r\n            <svg ref={svgRef} style={{width: '100%', height: '100%'}}>\r\n                <g className=\"group-container\">\r\n                    <g className={`${style.axis} x-axis`} />\r\n                    <g className={`${style.axis} y-axis`} />\r\n                    <path className={`${style.data} dataPath`}></path>\r\n                    <path className='sevenDayPath'></path>\r\n                    <g className={`${style.grid} gridLinesPath`}></g>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nTimevsCasesChart.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape(\r\n        {\r\n            date: PropTypes.instanceOf(Date),\r\n            cases: PropTypes.number,\r\n            average: PropTypes.number,\r\n        }\r\n    )),\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n    margin: PropTypes.shape({\r\n        left: PropTypes.number,\r\n        right: PropTypes.number,\r\n        top: PropTypes.number,\r\n        bottom: PropTypes.number,\r\n    })\r\n    \r\n};\r\n\r\nexport default TimevsCasesChart;","import React from 'react';\r\nimport TimevsCasesChart from 'Components/TimevsCasesChart';\r\n\r\n\r\nfunction NewCasesChart (props) {\r\n    const getSimpleData = () => props.data.map((val, i) => (\r\n      {\r\n          cases: val.cases, \r\n          date: val.date, \r\n      })\r\n    );\r\n\r\n    const margin = {top: 10, bottom: 30, left: 60, right: 30};\r\n\r\n    return (\r\n        <>\r\n        <div>Cumulative Covid-19 cases in {props.provinceName}</div>\r\n        {props.data ? (\r\n        <TimevsCasesChart \r\n            data={getSimpleData()}\r\n            margin={margin}\r\n            id={props.id}\r\n            style={props.style}>\r\n        </TimevsCasesChart>\r\n        ) : <small>No data available. Please try again later</small>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewCasesChart;","import * as d3 from 'd3';\r\n\r\nfunction getPositivityRate(dailyTests, dailyNewCases) {\r\n    let totalTests = 0;\r\n    let totalNewCases = 0;\r\n\r\n    for (let i = 0; i < dailyNewCases.length; i++) {\r\n        if (dailyTests[i] <= 0 || dailyNewCases[i] <= 0)\r\n            continue;\r\n        totalTests += dailyTests[i];\r\n        totalNewCases += dailyNewCases[i];\r\n    }\r\n\r\n    return (totalNewCases / totalTests) * 100;\r\n}\r\n/*\r\n    Gets the seven day average of a specified key in an array of objects.\r\n*/\r\nfunction get7DayAverageKey(data, index, key) {\r\n    let newData = data.slice(index - 3, index + 3)\r\n        .map(el => el[key]);\r\n\r\n    let mean = d3.mean(newData);\r\n    return mean === undefined ? 0 : mean;\r\n}\r\n\r\nexport {getPositivityRate, get7DayAverageKey}","import React from 'react';\r\n\r\nimport TimevsCasesChart from 'Components/TimevsCasesChart';\r\n\r\nimport {get7DayAverageKey} from 'Util/dataCalculations';\r\n\r\nfunction NewCasesChart (props) {\r\n\r\n    const getSimpleData = () => props.data.map((val, i) => (\r\n      {\r\n          cases: val.newCases,  // New Cases\r\n          date: val.date, \r\n          average: get7DayAverageKey(props.data, i, 'newCases')\r\n      })\r\n    );\r\n\r\n    const margin = {top: 10, bottom: 30, left: 60, right: 30};\r\n\r\n    return (\r\n        <>\r\n        <div>New Daily Covid-19 cases in {props.provinceName}</div>\r\n        {props.data ? (\r\n        <TimevsCasesChart \r\n            data={getSimpleData()}\r\n            margin={margin}\r\n            id={props.id}\r\n            style={props.style}>\r\n        </TimevsCasesChart>\r\n        ) : <small>No data available. Please try again later</small>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewCasesChart;","import React, { useEffect, useState} from 'react';\r\n\r\nimport style from './InfoItem.module.scss';\r\n\r\nfunction InfoItem(props) {\r\n\r\n    const getArrowStyle = (val) => {\r\n        if(val > 0) return style.up;\r\n        if(val === 0) return style.noChange;\r\n        if(val < 0) return style.down;\r\n    };\r\n\r\n    const getColor = (val, isIncreaseGood) => {\r\n        if(isIncreaseGood && val > 0) return 'green';\r\n        if(!isIncreaseGood && val > 0) return 'red';\r\n        else return 'red';\r\n    }\r\n    \r\n    return (\r\n        <div className={style.infoItem}>\r\n            <div className={style.icon}>\r\n                <img src={`covid-icons/${props.icon}`}></img>\r\n            </div>\r\n            <div className={style.text}>\r\n                <div className={style.title}>{props.title}</div>\r\n                <div className={style.description}>{props.description}</div>\r\n            </div>\r\n            <div className={style.amount}>\r\n                <span>{props.current}{props.suffix}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoItem;","import React, { useEffect, useState} from 'react';\r\n\r\n// Components\r\nimport InfoItem from './InfoItem';\r\n// Util\r\nimport {getPositivityRate} from 'Util/dataCalculations';\r\nimport {round} from 'Util/numberStuff';\r\n\r\n// Style\r\nimport style from './InfoDashboard.module.scss';\r\n\r\nfunction InfoDashboard(props){\r\n\r\n    let dataSet = props.data;\r\n    let addtlData = props.additionalData;\r\n\r\n    // Dashboard Data variables\r\n    let [positivity, setPositivity] = useState(100);\r\n    // All stats below are arrays of length 2 with the format [current, previous]\r\n    let [hospitalized, setHospitalized] = useState([0, 0]);\r\n    let [inICU, setICU] = useState([0,0]);\r\n    let [deceased, setDeceased] = useState([0,0]);\r\n\r\n    useEffect(() => {\r\n        if(!dataSet) return;\r\n\r\n        // Good for 7-Day rolling averages\r\n        let last7Days = dataSet.slice(dataSet.length - 7, dataSet.length);\r\n        \r\n        // For our Percentage Positive calculations I'm using a 7 day average\r\n        let roundedPositivity = round(getPositivityRate(\r\n            last7Days.map(t => t.positiveTests + t.negativeTests), \r\n            last7Days.map(t => t.positiveTests)), 1)   \r\n        setPositivity(roundedPositivity);\r\n\r\n\r\n        setHospitalized(\r\n            dataSet\r\n                .map(el => el.hospitalBeds.currentUsageCovid) // Extract the proper field\r\n                .filter(el => el !== null) // Sometimes the latest data is null, we account for that\r\n                .slice(-2) // Get the last two elements\r\n        );\r\n\r\n        // Same process as above\r\n        setICU(\r\n            dataSet\r\n                .map(el => el.icuBeds.currentUsageCovid)\r\n                .filter(el => el !== null)\r\n                .slice(-2)\r\n        );\r\n\r\n        setDeceased(dataSet.map(el => el.deaths).slice(-2));\r\n\r\n    }, [dataSet]);\r\n\r\n    let vaccinated = addtlData ? addtlData.vaccinationsInitiatedRatio * 100 : null;\r\n\r\n    return (\r\n        <>\r\n            {dataSet && (\r\n                <div className={style.infoDashboard}>\r\n                    <InfoItem \r\n                        icon={'infected-lungs.svg'} \r\n                        title={'Positivity Rate'} \r\n                        description={'The percentage of positive tests results out of all Covid-19 tests done.'}\r\n                        current={positivity} />                    \r\n                    <InfoItem \r\n                        icon={'hospital.svg'} \r\n                        title={'Currently Hospitalized'} \r\n                        current={hospitalized[1]} \r\n                        description={'Current amount of people hospitalized due to Covid-19.'} />\r\n                    <InfoItem \r\n                        icon={'ventilator.svg'} \r\n                        title={'In ICU'}\r\n                        description={'Current amount of patients with the disease using ICU beds.'}\r\n                        current={inICU[1]} />\r\n                    <InfoItem \r\n                        icon={'death.svg'} \r\n                        title={'Deaths'}\r\n                        description={'Covid-19 related deaths.'}\r\n                        current={deceased[1]} />\r\n                    <InfoItem\r\n                        icon={'vaccine.svg'}\r\n                        title={'Population Vaccinated (1st dose)'}\r\n                        description={\"Percentage of the state's population that has received at least one dose of the Covid-19 vaccine.\"}\r\n                        current={vaccinated.toFixed(1)} \r\n                        suffix={'%'} />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InfoDashboard;","function round(value, decimals) {\r\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\r\n}\r\n\r\nexport {round}","export const SeverityDefinitions = [    \r\n    {\r\n        mainText: 'Low',\r\n        subText: 'On track for containment',\r\n    },\r\n    {\r\n        mainText: 'Medium',\r\n        subText: 'Slow disease growth',\r\n    },\r\n    {\r\n        mainText: 'High',\r\n        subText: 'At risk of outbreak',\r\n    },\r\n    {\r\n        mainText: 'Critical',\r\n        subText: 'Active outbreak',\r\n    },\r\n    {\r\n        mainText: 'Severe',\r\n        subText: 'Severe outbreak',\r\n    },\r\n];\r\n\r\n","import React from 'react';\r\nimport {SeverityDefinitions} from 'constants.js';\r\n\r\nfunction StatusIndicator({severity}) {\r\n\r\n    let severityObj = SeverityDefinitions[severity];\r\n\r\n    return(\r\n        <>\r\n            <h3>Risk level - {severityObj.mainText}</h3> <h4>{severityObj.subText}</h4>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StatusIndicator;","import React, { useEffect, useState } from 'react';\r\n//Utils\r\nimport acronymToFullName from 'Util/stateAcronyms';\r\n// Views\r\nimport CumulativeCasesChart from './DashElements/CumulativeCases';\r\nimport NewCasesChart from './DashElements/NewCases';\r\nimport InfoDashboard from './DashElements/InfoDashboard';\r\nimport StatusIndicator from './DashElements/StatusIndicator';\r\n// Components\r\nimport ProvinceSelector from 'Components/ProvinceSelector';\r\n\r\n// Style\r\nimport style from './index.module.scss';\r\n\r\nfunction Dash({province, provinceList, provinceHandler, API_KEY}){\r\n\r\n  let [dataSet, setData] = useState(null);\r\n  let [originalData, setOriginalData] = useState(null);\r\n\r\n  let provinceName = acronymToFullName(province);\r\n\r\n  useEffect(() => {    \r\n      async function fetchData() {\r\n        let result = false;\r\n        \r\n        console.log('Fetching data for: ' + province);\r\n  \r\n        try{\r\n          result = await (await fetch(`https://api.covidactnow.org/v2/state/${province}.timeseries.json?apiKey=${API_KEY}`)).json();\r\n        }\r\n        catch(error){\r\n          console.log('Could not retrieve data. Error: ' + error);\r\n          return;\r\n        }\r\n  \r\n        // Original information in case we need it.\r\n        setOriginalData(result);\r\n  \r\n        // We only need the timeseries section of the API call result for the graphs.\r\n        // Skip the data that's null\r\n        let timeSeries = result.actualsTimeseries.filter(el => el.newCases !== null || el.cases !== null); \r\n  \r\n        const formattedResult = timeSeries.map(curr => {\r\n          // JS Dates' parse method is not recommended anymore, so I manually insert the values onto a new Date object.\r\n          const ds = curr.date.toString();\r\n          // The format the API provides is YYYY-MM-DD\r\n          const formattedDate = new Date(ds.slice(0,4), ds.slice(5,7) - 1 /*Month should be 0-indexed */, ds.slice(8,10));\r\n  \r\n          return {...curr, date: formattedDate,}\r\n        });\r\n  \r\n        setData(formattedResult);\r\n        }\r\n        \r\n        fetchData();\r\n  }, [province]);\r\n\r\n  const severityThemeCorrelation = [\r\n    {\r\n      level: 'low',\r\n      style: style.low\r\n    },\r\n    {\r\n      level: 'medium',\r\n      style: style.medium\r\n    },\r\n    {\r\n      level: 'high',\r\n      style: style.high\r\n    },\r\n    {\r\n      level: 'critical',\r\n      style: style.critical\r\n    },\r\n    {\r\n      level: 'severe',\r\n      style: style.severe\r\n    },  \r\n  ];\r\n\r\n  return(\r\n      <>\r\n      {provinceList && dataSet ? (\r\n          <>\r\n            {/* TODO: Make this its own element? */}\r\n            <div className={style.top + ' ' + severityThemeCorrelation[originalData ? originalData.riskLevels.overall : null].style}>\r\n              <h1>Covid-19 in {provinceName}</h1>\r\n              <StatusIndicator severity={originalData ? originalData.riskLevels.overall : null} />\r\n\r\n              <div>If you want to see the data from another state, select it here: </div>\r\n              <ProvinceSelector province={province} provinceList={provinceList} handleChange={provinceHandler} />\r\n\r\n              <div className={style.graphGroup}>\r\n                <div className={style.graphContainer}>\r\n                  <NewCasesChart data={dataSet} provinceName={provinceName} style={style} />\r\n                </div>\r\n                <div className={style.graphContainer}>\r\n                  <CumulativeCasesChart data={dataSet} provinceName={provinceName} style={style} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={style.bottom}>\r\n              <InfoDashboard data={dataSet} additionalData={originalData ? originalData.metrics : null} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>Loading...</>\r\n        )}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default Dash;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div>\r\n            <h1>Credits</h1>\r\n\r\n            <p>Created by <a href=\"https://alleras.github.io\">Agustin Lleras</a></p>\r\n            <p>Using data from <a href=\"https://covidactnow.org/\">Covid Act Now</a></p>\r\n            <p>Uses Reverse Geolocation with the Google Maps API</p>\r\n\r\n            <p>\r\n                Icons by <a href=\"https://vulcanca.com/news/vulcan-creates-icons-for-covid-19-messaging\">Vulcan</a> and <a href=\"https://www.iconfinder.com/becris\">Becris</a>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\n// Styling\nimport style from './App.module.scss';\n// Views\nimport Initial from './Views/Initial';\nimport Dash from './Views/Dash/';\nimport Footer from './Views/Footer';\n\n/**\n TODO: CHANGE BACKGROUND COLOR DEPENDING ON SEVERITY LEVEL!!!\n TODO: Organize folders with views, components, etc\n TODO: Add spinner next to location selector when it's loading the data\n TODO: Handle errors that could happen with ReverseGeocoding\n TODO: Add spinner to get location button\n */\n\n const API_KEY = 'b702d2590f054d019dd497ca87fc7de5';\n\nfunction App() {\n  let sessionProvince = sessionStorage.getItem('province');\n  let [province, setCurrentProvince] = useState(sessionProvince || null);\n  let [provinceList, setProvinces] = useState(null);\n  \n  useEffect(() => {\n    async function fetchProvinces() {\n      let provinces = await (await fetch(`https://api.covidactnow.org/v2/states.json?apiKey=${API_KEY}`)).json();\n      setProvinces(provinces);\n    }\n\n    fetchProvinces();\n  }, []);\n  \n  return (\n    <div className={style.App}>\n      {!province ? (\n        <Initial provinceList={provinceList} provinceHandler={setCurrentProvince} />\n      ) : (\n        <>\n          <Dash province={province} provinceList={provinceList} provinceHandler={setCurrentProvince} API_KEY={API_KEY} />\n          <Footer />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}